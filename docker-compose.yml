version: '3'

services:
  estoque-service:
    build: estoque/.
    container_name: estoque
    depends_on:
      - database
      - config-server
      - service-discovery
    command: ["/usr/local/estoque/run.sh"]
    networks:
      microservices:
        ipv4_address: 172.33.0.101
    expose:
      - 8080
    environment:
      TZ: "America/Sao_Paulo"
      PROFILE: "local"
      SERVER_PORT: "8080"
      CONFIGSERVER_URI: "http://config-server:8080"

  config-server:
    build: config-server/.
    container_name: config-server
    depends_on:
      - rabbitmq
      - service-discovery
    command: ["/usr/local/config-server/run.sh"]
    networks:
      microservices:
        ipv4_address: 172.33.0.103
    expose:
      - 8080
    environment:
      TZ: "America/Sao_Paulo"
      PROFILE: "local"
      SERVER_PORT: "8080"

  service-discovery:
    build: service-discovery/.
    container_name: service-discovery
    command: ["/usr/local/service-discovery/run.sh"]
    networks:
      microservices:
        ipv4_address: 172.33.0.105
    expose:
      - 8080
    environment:
      TZ: "America/Sao_Paulo"
      PROFILE: "local"
      SERVER_PORT: "8080"

  database:
    image: mysql
    container_name: mysql
    command: --init-file /usr/home/database/init_estoque.sql
    restart: always
    networks:
      microservices:
        ipv4_address: 172.33.0.102
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: estoque
      TZ: "America/Sao_Paulo"
    volumes:
      - mysql:/var/lib/mysql
      - ./database/mysql:/usr/home/database
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    networks:
      microservices:
        ipv4_address: 172.33.0.104
    environment:
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
      RABBITMQ_DEFAULT_VHOST: "/"

  mongodb:
    image: mongo:3.6.3
    container_name: mongo
    command: --bind_ip_all
    networks:
      microservices:
        ipv4_address: 172.33.0.107
    expose:
      - 27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 1234
      MONGO_INITDB_DATABASE: pedido
    volumes:
      - ./database/mongodb/init_pedido.js:/docker-entrypoint-initdb.d/mongo-init.js
      - mongodb:/data/db

  mongo-express:
    image: mongo-express
    restart: always
    networks:
      microservices:
        ipv4_address: 172.33.0.108
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: 1234


networks:
  microservices:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv4: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.33.0.0/16 
volumes:
  mysql:
    driver: local
  mongodb:
    driver: local


